pipeline {
    agent { label 'nyamat-security-agent' }

    triggers {
        pollSCM('H/3 * * * *') // Poll every 3 mins (or use webhook)
    }

    environment {
        DOCKERHUB_USER = 'nyamatullahmohammed'
        IMAGE_NAME = 'jenkins-docker-lab'
        SONARQUBE = 'SonarCloud'
        SONAR_TOKEN = credentials('nyamat-sonarcloud-token')

    }

    stages {

        stage('S1 - Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('S2 - Checkout SCM') {
            steps {
                checkout scm
            }
        }

        stage('S3 - GitLeaks Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if ! command -v gitleaks &> /dev/null; then
                        wget https://github.com/zricethezav/gitleaks/releases/download/v8.18.1/gitleaks_8.18.1_linux_x64.tar.gz
                        tar -xzf gitleaks_8.18.1_linux_x64.tar.gz
                        chmod +x gitleaks
                        sudo mv gitleaks /usr/local/bin/
                    fi

                    exit_code=0
                    if ! gitleaks detect --source . --no-git --verbose --report-path gitleaks-report.json; then
                        exit_code=$?
                    fi

                    if [ "$exit_code" -ne 0 ]; then
                        echo "‚ùå Gitleaks found leaks"
                        exit 1
                    else
                        echo "‚úÖ No leaks found"
                    fi
                '''
            }
        }

        stage('S4 - SonarQube Analysis') {
            steps {
               withSonarQubeEnv(credentialsId: 'nyamat-sonarcloud-token', installationName: 'nyamat-sq') {
                    sh '''#!/bin/bash
                        set -eux
                        export SONAR_SCANNER_VERSION=7.2.0.5079
                        export SONAR_SCANNER_HOME=$HOME/.sonar/sonar-scanner-$SONAR_SCANNER_VERSION-linux-x64
                        curl --create-dirs -sSLo $HOME/.sonar/sonar-scanner.zip https://binaries.sonarsource.com/Distribution/sonar-scanner-cli/sonar-scanner-cli-$SONAR_SCANNER_VERSION-linux-x64.zip
                        unzip -o $HOME/.sonar/sonar-scanner.zip -d $HOME/.sonar/
                        export PATH=$SONAR_SCANNER_HOME/bin:$PATH

                        sonar-scanner \
                        -Dsonar.organization="nyamatullahmohammed" \
                        -Dsonar.projectKey="nyamatullahmohammed_devsecopslabs_integration" \
                        -Dsonar.host.url=https://sonarcloud.io \
                        -Dsonar.sources=. \
                        -Dsonar.python.coverage.reportPaths=coverage.xml \
                        -Dsonar.c.file.suffixes=- \
                        -Dsonar.cpp.file.suffixes=- \
                        -Dsonar.objc.file.suffixes=- \
                        -Dsonar.login=$SONAR_TOKEN \
                        -Dsonar.exclusions=**/venv/**,**/__pycache__/**,**/tests/**
                    '''
                }
            }
        }

      

        stage('S6 - Docker Build for Python App') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if [ ! -f python_app/Dockerfile ]; then
                        echo "‚ùå Dockerfile not found in python_app directory"
                        exit 1
                    fi

                    # Build from project root, using python_app/Dockerfile
                    docker build -t $DOCKERHUB_USER/$IMAGE_NAME:latest -f python_app/Dockerfile .

                    # Stop/remove existing container on port 8005 if any
                    existing_container=$(docker ps -q --filter "publish=8005" || true)
                    if [ -n "$existing_container" ]; then
                        docker stop $existing_container || true
                        docker rm $existing_container || true
                    fi
                '''
            }
        }


        stage('S7 - Trivy Image Scan') {
            steps {
                sh '''#!/bin/bash
                    set -eux
                    if ! command -v trivy &> /dev/null; then
                        echo "Installing Trivy..."
                        sudo apt-get update -y
                        sudo apt-get install -y wget apt-transport-https gnupg lsb-release
                        wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
                        echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee /etc/apt/sources.list.d/trivy.list
                        sudo apt-get update -y
                        sudo apt-get install -y trivy
                    fi

                    echo "Running Trivy scan..."
                    trivy image --exit-code 0 --severity HIGH,CRITICAL $DOCKERHUB_USER/$IMAGE_NAME:latest
                '''
            }
        }

        stage('S8 - Deploy App Locally') {
            when {
                expression { currentBuild.currentResult == 'SUCCESS' }
            }
            steps {
                sh '''#!/bin/bash
                    set -eux
                    echo "Deploying application locally..."
                    docker ps -q --filter "publish=8005" | xargs -r docker rm -f || true
                    docker run -d -p 8005:5000 --name python_app $DOCKERHUB_USER/$IMAGE_NAME:latest
                    echo "‚úÖ Application deployed and running locally on port 8005"
                '''
            }
        }
stage('OWASP ZAP Scan') {
    agent { label 'nyamat-ubuntu-a' }
    steps {
        sh '''#!/bin/bash
        # Use Bash explicitly so "pipefail" works
        set -euxo pipefail
 
        TARGET_URL="http://98.94.4.136:8005"
 
        echo "üîÑ Waiting for app to start..."
        for i in {1..10}; do
            if curl -s --max-time 5 $TARGET_URL >/dev/null; then
                echo "‚úÖ App is up!"
                break
            fi
            sleep 5
        done
 
        echo "üöÄ Running OWASP ZAP Baseline Scan..."
        # Run ZAP in Docker; ignore exit code (ZAP returns 2 for warnings)
        docker run --rm -v $(pwd):/zap/wrk/:rw \
            --network="host" \
            ghcr.io/zaproxy/zaproxy:stable \
            zap-baseline.py -t $TARGET_URL -r zap_report.html || true
 
        mkdir -p reports
        mv zap_report.html reports/
 
        echo "üîç Checking ZAP results for FAIL-NEW entries..."
        FAIL_COUNT=$(grep -oE "FAIL-NEW: [0-9]+" reports/zap_report.html | awk '{print $2}' || echo 0)
 
        # If grep finds nothing, default to 0
        if [ -z "$FAIL_COUNT" ]; then
            FAIL_COUNT=0
        fi
 
        if [ "$FAIL_COUNT" -gt 0 ]; then
            echo "‚ùå ZAP found $FAIL_COUNT high-severity vulnerabilities!"
            exit 1
        else
            echo "‚úÖ No high-severity vulnerabilities found. Build will continue."
        fi
        '''
    }
    post {
        always {
            archiveArtifacts artifacts: 'reports/zap_report.html', fingerprint: true
        }
        success {
            echo '‚úÖ ZAP scan completed successfully ‚Äî only warnings or no issues.'
        }
        failure {
            echo '‚ùå Build failed because high-severity issues were found in ZAP scan.'
        }
        }
    }
}
}
